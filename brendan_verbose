Ah, cool! Ticket to Ride on Rails?

Using select is a perfectly fine way of doing things. It's computationally identical to the naive version I posted (each select runs over the entire list), and it's pretty clear what's going on. In a way it documents the scoring function better than either of my versions. At least, it goes about stating it the way you would in English. My naive version could use some more commenting.

You're absolutely right: you're using case incorrectly.

Instead of this:

case ones
when ones.length < 3 then score += ones.length*100
when ones.length == 3 then score += 1000
when ones.length == 4 then score += 1100
when ones.length == 5 then score += 1200
end

You should do this:

case ones.length
when 3: score += 1000
when 4: score += 1100
when 5: score += 1200
else
score += ones.length*100
end

Case basically takes the value of one statement and compares it to the value of another statement; if they match, it runs the corresponding code. So when you write:

case ones
when ones.length < 3:
puts 'foo'
end

Ruby actually compares the value of 'ones' to the value of 'ones.length < 3'. So that's equivalent to one of the following options:

false === ones
true === ones

... which will be false no matter what, given that 'ones' is an Array. You want to pass in 'ones.length' and compare it to the desired lengths (3,4,5). Then 'else' can be used to catch the other options. Incidentally, you'll notice that this is yet another equality function (=== versus == and .equals?). This one is case equality; check out http://ruby-doc.org/core/classes/Object.html#M000343. So, you can easily rewrite your 'ones' and 'fives' versions. But you can't really do the 'everyoneelse' version with case. You can rewrite that with a few simple if statements.

It's no problem for me to go over the Hash version. I'll just do it over email, since I can leave it and come back, and it'll be a better reference for you that way.

# Use a Hash with a default value of 0 for each new key.
counts = Hash.new{|h,k| h[k] = 0}

You can create a Hash with Hash.new; if you pass it a block, you can define default values for undefined keys. So, my example has this block:

{|h,k| h[k] = 0}

This says, "for a new key 'k' on Hash 'h', set the value of 'k' to 0". When you access a new key, you get a default value instead of nil. Compare:

> no_default = Hash.new > has_default = Hash.new {|h,k| h[k] = 'custom default'} > no_default['foo'] => nil > has_default['foo'] => "custom default" > has_default['bar'] += ' and this works' => "custom default and this works" > no_default['bar'] += ' and this fails' NoMethodError: undefined method `+' for nil:NilClass from (irb):118 from :0

By default, if you ask a Hash for the value of a key that it doesn't have, it'll give you nil. If you create it with this special block, it'll call the block first. You'll see why I did this in the next line.


# Run through each die and increment its count.

dice.each {|die| counts[die] += 1}


So, in this line we run through each die in the array of dice. We use the die as the key into our Hash, and increment the corresponding value by one. So, you can imagine the Hash looking like this:


counts = {1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0}


Each possible die is accounted for, and all start out at a count of 0. Each value of 'die' is used to access the Hash, and the number that value points to has 1 added to it. Setting up counts using the 0-as-default block lets us be agnostic about what the actual die values are, as opposed to explicitly writing them out (like I did above).


Compare:


no_default = {} # shorthand for Hash.new, like [] is short for Array.new if !no_default.has_key?(0) no_default[0] = 0 end no_default[0] += 1 no_default => {0=>1}

and:


has_default = Hash.new{|h,k| h[k]=0} has_default[0] += 1 has_default => {0=>1}

The former explicitly checks whether the hash has the key in question, and sets the value to 0 if it didn't. Thats because if you just type {}[0] += 1, you'll get an error. {}[0] returns nil (A new Hash has no value at key 0), and nil + 1 is crazy talk.


# Tally up the scores

counts.each do |k,v|

...

end


You can call 'each' on a Hash just like you can on an array. Instead of giving you one item like an Array, it gives you the key => value pairs. So this block gets each key (the die value) and each value (the number of times that value appeared).


score += (k == 1 ? 1000 : (k * 100)) if v >= 3


This is a dense line. Let's work from the back. It ends with 'if v >= 3', so it only runs if the given key appears 3 or more times. Then we have the value that we're adding to the score. It uses the ternary operator for shorthand. That's basically:


<test statement> ? <value if true> : <value if false>


So ours is:


<k == 1> ? <1000> : <k * 100>, or "If k is one, 1000; otherwise, k * 100". Straight out of the rule book, but a tad convoluted. You could just as easily have written:


if v >= 3

if k == 1

score += 1000

else

score += k * 100

end

end


... but that's 7 lines! ;)


if k == 1

score += 100 * (v % 3)

elsif k == 5

score += 50 * (v % 3)

end


This final bit pick up the non-triplet values. We only get points for 1 and 5 in this case, so I'm looking at them explicitly. Recall that 'k' is the value of the face, and 'v' is the number of times it appears. I'm using the modulo operation to figure out how many times the number appears outside of a triplet: http://en.wikipedia.org/wiki/Modulo_operation


This is a really valuable mathematical tool that you'll see in a lot of different places. It's basically the remainder for a division problem. Some examples:


1 % 3 # 1 2 % 3 # 2 3 % 3 # 0 4 % 3 # 1 5 % 3 # 2
So, the first number in these examples is analogous to possible counts for a given face (i.e., this face appears 1-5 times). If I have the '1' die appear 5 times, I want to count one triplet and two singles. If it appears twice, I only want to count 2 singles. The % 3 makes both cases turn into the correct value of singles.


Another good use is to tell whether a number is even or odd (useful for alternating the color of something):


%w{eye bye fly tie why cry die shy}.each_with_index do |v,i|

puts "#{v} is at an #{i % 2 == 0 ? 'even, make it red' : 'odd, make it blue'}"

end

Anyway, I'm sure that's raised other questions. Like, what the heck is all of that incomprehensible gook in the above code!? (Well, %w{...} creates an array of space-separated strings; each_with_index does your normal iteration, but adds a variable corresponding to the index of the given element, and #{} inside a double quoted string does string interpolation for that variable).


Whew.